#!/bin/bash

# TDA4VM Yocto Development Environment Setup Script
# Automated setup for cross-platform development

set -e  # Exit on any error

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_NAME="TDA4VM Yocto Builder"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_banner() {
    echo ""
    echo "=========================================="
    echo "   $PROJECT_NAME Setup"
    echo "=========================================="
    echo "SDK: TI Processor SDK Analytics 11.01.07.05"
    echo "Target: J721E EVM (TDA4VM)"
    echo "Yocto: Scarthgap"
    echo ""
}

check_dependencies() {
    log_info "Checking system dependencies..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        echo "Please install Docker:"
        echo "  macOS: https://docs.docker.com/desktop/mac/install/"
        echo "  Linux: https://docs.docker.com/engine/install/"
        echo "  Windows: https://docs.docker.com/desktop/windows/install/"
        exit 1
    fi
    log_success "Docker found: $(docker --version)"
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "docker-compose is not installed"
        echo "Please install docker-compose:"
        echo "  pip install docker-compose"
        echo "  or download from: https://docs.docker.com/compose/install/"
        exit 1
    fi
    log_success "Docker Compose found: $(docker-compose --version)"
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        echo "Please start Docker daemon first"
        exit 1
    fi
    log_success "Docker daemon is running"
    
    # Check Make (optional but recommended)
    if command -v make &> /dev/null; then
        log_success "Make found: $(make --version | head -1)"
    else
        log_warning "Make not found - you'll need to use docker-compose commands directly"
    fi
}

setup_git_config() {
    log_info "Setting up Git configuration for container..."
    
    # Try to get git config from host system
    GIT_NAME=$(git config --global user.name 2>/dev/null || echo "")
    GIT_EMAIL=$(git config --global user.email 2>/dev/null || echo "")
    
    if [ -z "$GIT_NAME" ] || [ -z "$GIT_EMAIL" ]; then
        log_warning "Git not configured on host system"
        echo "Please configure git:"
        echo "  git config --global user.name 'Your Name'"
        echo "  git config --global user.email 'your.email@example.com'"
        echo ""
        echo "Or set environment variables:"
        echo "  export GIT_USER_NAME='Your Name'"
        echo "  export GIT_USER_EMAIL='your.email@example.com'"
    else
        log_success "Using Git config: $GIT_NAME <$GIT_EMAIL>"
        export GIT_USER_NAME="$GIT_NAME"
        export GIT_USER_EMAIL="$GIT_EMAIL"
    fi
}

create_env_file() {
    log_info "Creating environment configuration..."
    
    ENV_FILE="$SCRIPT_DIR/.env"
    
    # Get user/group IDs for proper file permissions
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        USER_ID=$(id -u)
        GROUP_ID=$(id -g)
    else
        # macOS/Windows - use default
        USER_ID=1000
        GROUP_ID=1000
    fi
    
    cat > "$ENV_FILE" << EOF
# TDA4VM Yocto Build Environment Configuration
# Auto-generated by dev-setup.sh

# User permissions (for file ownership)
USER_ID=$USER_ID
GROUP_ID=$GROUP_ID

# Git configuration (override as needed)
GIT_USER_NAME=${GIT_USER_NAME:-"Developer"}
GIT_USER_EMAIL=${GIT_USER_EMAIL:-"developer@example.com"}

# Build parallelization (adjust based on your system)
BB_NUMBER_THREADS=${BB_NUMBER_THREADS:-$(nproc 2>/dev/null || echo 4)}
PARALLEL_MAKE=${PARALLEL_MAKE:-$(nproc 2>/dev/null || echo 4)}

# Target machine
MACHINE=j721e-evm
DISTRO=arago
EOF
    
    log_success "Environment file created: $ENV_FILE"
}

build_docker_image() {
    log_info "Building Docker image (this may take 5-10 minutes)..."
    
    cd "$SCRIPT_DIR"
    
    # Build with proper user IDs
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        USER_ID=$(id -u)
        GROUP_ID=$(id -g)
    else
        USER_ID=1000
        GROUP_ID=1000
    fi
    
    docker-compose build \
        --build-arg USER_ID=$USER_ID \
        --build-arg GROUP_ID=$GROUP_ID
    
    log_success "Docker image built successfully"
}

show_quick_start() {
    echo ""
    echo "=========================================="
    echo "   🚀 Setup Complete!"
    echo "=========================================="
    echo ""
    echo "Quick Start Commands:"
    echo ""
    if command -v make &> /dev/null; then
        echo "  make help           - Show all available commands"
        echo "  make shell          - Enter development shell"
        echo "  make build          - Build EdgeAI image"
        echo "  make status         - Show build status"
        echo ""
        echo "Development workflow:"
        echo "  1. make shell       - Enter container"
        echo "  2. Edit code in your favorite editor (files are mounted)"
        echo "  3. Build: MACHINE=j721e-evm bitbake tisdk-edgeai-image"
    else
        echo "  docker-compose run --rm yocto-builder  - Enter development shell"
        echo "  docker-compose up -d                   - Start container"
        echo "  docker-compose exec yocto-builder bash - Enter running container"
    fi
    echo ""
    echo "📁 Files are mounted from: $SCRIPT_DIR"
    echo "🏗️  Build outputs will be in: build/arago-tmp-external-arm-glibc/deploy/images/"
    echo "💾 Flash .wic files to SD card for TDA4VM board"
    echo ""
    echo "📚 Documentation: README_TDA4VM.md"
    echo ""
}

cleanup_on_error() {
    log_error "Setup failed. Cleaning up..."
    docker-compose down 2>/dev/null || true
}

main() {
    trap cleanup_on_error ERR
    
    print_banner
    check_dependencies
    setup_git_config
    create_env_file
    build_docker_image
    show_quick_start
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi